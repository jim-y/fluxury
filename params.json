{"name":"Fluxury","tagline":"A React - Flux starter kit.","body":"### Welcome to Fluxury's project-page.\r\nThis is a short share-how about Fluxury's implementation details. I plan to keep it clear and simple.\r\n\r\n### Build tool\r\nI switched from `Grunt` to `npm` because I wanted to get rid of the numerous grunt-* dependencies. Using npm as a build tool in such a small project (as well as in biggers) is easy, and you don't need any dependency doing it. For more about this topic read this blog post: [How to use npm as a build tool](http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/)\r\n\r\n### Used technologies\r\n\r\n* **browserify**: for bundling up CommonJS modules for the browser\r\n* **react**: for achieving component driven programming style\r\n* **flux**: for managing data flow through the application. ~Observer pattern, also known as Publish-Subscribe\r\n* **immutable**: to hold the application state in immutable data sets\r\n* **react-router**: I found this library really handy for inter-screen transitions\r\n\r\nImmutability generally makes your state management side effect free by creating new data sets on every mutations. In the skeleton app I've just made some pin-points on how to use the library. React-router makes the transitions between your pages/screens a charm. Ever made your mind around how to switch pages in an SPA? This library can be an answer to your questions. \r\n\r\nIn short, you make a list about your routes/pages, like [home, contact, shop, projects, etc...], and you define handler React-components for these routes, and you will put a placeholder (Director) somewhere in your masterpage. Then, whenever you want redirect the user from page A to page B, you only need to create a Link component which tells the router where you want to navigate. (e.g <Link to=\"home\">Home</Link>). Then, the placehold will hold a new value, and that will be your component defined for the Home route.\r\n\r\n### Devdependencies\r\n* **jsxhint**: for linting your code.\r\n* **node-jscs**: jscs needs to be pre-installed globally, but the app holds a build target, and an airbnb preset for coding-style validation. Sadly jscs doesn't support ES6 well, so we get some strange errors for our ES6 classes in the store(s).\r\n* **reactify**: browserify-transform for ES6-to-ES5 compilation.\r\n* **uglify**: minifying the codebase. TBD\r\n* **watchify**: for live-rebuild. TBD\r\n\r\n### Details\r\nI used ES6 classes in the Store, and ES6 destructuring among the app. \r\n\r\nDestructuring:\r\n\r\n```js\r\n{ Home, Contact, PirateBadge } = require('./components/Components')\r\n```\r\n\r\nThis is the same, as writing:\r\n\r\n```js\r\nHome = require('./components/Components').Home,\r\nContact = require('./components/Components').Contact,\r\nPirateBadge = require('./components/Components').PirateBadge\r\n```\r\n\r\n### Disclaimer\r\nThe rewrital is not finished, yet. Some smaller parts, and some modifications needs to be done (TBD). While I encourage you to create a pull-request if you find something, I will try to solve these missings as soon as possible.\r\n\r\nCheers, Jim\r\n\r\n### Contact\r\n* [@attilakling](https://twitter.com/attilakling)\r\n* [Jim-Y@prohardver](http://prohardver.hu/tag/jim-y.html)\r\n* [Email](attila.kling@gmail.com)\r\n* [Blog](http://jim-y.me/)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}